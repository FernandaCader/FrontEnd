{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ferna/OneDrive/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  uploadImage($event) {\n    const file = $event.target.files[0];\n    const imgRef = ref(this.storage, `imagen/` + name);\n    uploadBytes(imgRef, file).then(response => {\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n\n  getImages() {\n    var _this = this;\n\n    const imagesRef = ref(this.storage, `imagen`);\n    list(imagesRef).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        for (let item of response.items) {\n          _this.url = yield getDownloadURL(item);\n          console.log(\"La URL es \" + _this.url);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n}\n\nImageService.ɵfac = function ImageService_Factory(t) {\n  return new (t || ImageService)(i0.ɵɵinject(i1.Storage));\n};\n\nImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageService,\n  factory: ImageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAkBA,GAAlB,QAA6B,uBAA7B;;;AAKA,OAAM,MAAOC,YAAP,CAAmB;EAEvBC,YAAoBC,OAApB,EAAoC;IAAhB;EAAqB;;EAElCC,WAAW,CAACC,MAAD,EAAY;IAC9B,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,CAApB,CAAb;IACA,MAAMC,MAAM,GAAGT,GAAG,CAAC,KAAKG,OAAN,EAAe,YAAWO,IAA1B,CAAlB;IACAC,WAAW,CAACF,MAAD,EAASH,IAAT,CAAX,CAA0BM,IAA1B,CAA+BC,QAAQ,IAAG;MAAG,KAAKC,SAAL;IAAkB,CAA/D,EACGC,KADH,CACSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADlB;EAED;;EAEDF,SAAS;IAAA;;IACP,MAAMK,SAAS,GAAGnB,GAAG,CAAC,KAAKG,OAAN,EAAe,QAAf,CAArB;IACAiB,IAAI,CAACD,SAAD,CAAJ,CACGP,IADH;MAAA,6BACQ,WAAMC,QAAN,EAAiB;QACrB,KAAK,IAAIQ,IAAT,IAAiBR,QAAQ,CAACS,KAA1B,EAAiC;UAC/B,KAAI,CAACC,GAAL,SAAiBC,cAAc,CAACH,IAAD,CAA/B;UACAJ,OAAO,CAACC,GAAR,CAAY,eAAe,KAAI,CAACK,GAAhC;QAED;MACF,CAPH;;MAAA;QAAA;MAAA;IAAA,KAQGR,KARH,CAQSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CARlB;EASD;;AAtBwB;;;mBAAZf,cAAYwB;AAAA;;;SAAZxB;EAAYyB,SAAZzB,YAAY;EAAA0B,YAFX","names":["ref","ImageService","constructor","storage","uploadImage","$event","file","target","files","imgRef","name","uploadBytes","then","response","getImages","catch","error","console","log","imagesRef","list","item","items","url","getDownloadURL","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ferna\\OneDrive\\Documents\\GitHub\\FrontEnd\\src\\app\\service\\image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref } from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  constructor(private storage: Storage) { }\n\n  public uploadImage($event: any){\n  const file = $event.target.files[0]\n  const imgRef = ref(this.storage, `imagen/`+ name)\n  uploadBytes(imgRef, file).then(response => { this.getImages() })\n    .catch(error => console.log(error))\n}\n\ngetImages() {\n  const imagesRef = ref(this.storage, `imagen`)\n  list(imagesRef)\n    .then(async response => {\n      for (let item of response.items) {\n        this.url = await getDownloadURL(item);\n        console.log(\"La URL es \" + this.url);\n        \n      }\n    })\n    .catch(error => console.log(error))\n}\n}"]},"metadata":{},"sourceType":"module"}